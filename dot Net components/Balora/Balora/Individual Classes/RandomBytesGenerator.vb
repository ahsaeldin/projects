Imports System.Text
Imports System.Security.Cryptography

'Develop this class in the future by adding a purely random numbering generator.
Public Class RandomBytesGenerator
    Inherits BaloraBase

    ''' <summary>
    ''' Generate a random bytes using RNGCryptoServiceProvider then
    ''' mask it using the sting mask specified in the parameters.
    ''' </summary>
    ''' <param name="mask">You can return numbers only using the mash</param>
    ''' <returns>A random string generated by masking a random bytes returned by RNGCryptoServiceProvider</returns>
    ''' <remarks>Credits to http://www.codeproject.com/KB/aspnet/UniqueKeys.aspx </remarks>
    Public Shared Function GRCM(Optional ByVal maxSize As Integer = 8,
                                Optional ByVal mask As String = vbNullString) As String
        Return generateRNGCharacterMask(maxSize, mask)
    End Function

    Private Shared Function generateRNGCharacterMask(Optional ByVal maxSize As Integer = 8,
                                                     Optional ByVal mask As String = vbNullString) As String
        'Ex:
        'Dim len As Integer = 1000000
        'Dim keys As String() = New String(len - 1) {}
        'Dim rndNumber As New Random
        'For [loop] As Integer = 0 To len - 1
        '	'Three methods to generate random numbers
        '	keys([loop]) = RandomBytesGenerator.GenerateRNGCharacterMask()
        '	'keys([loop]) = Guid.NewGuid.ToString
        '	'keys([loop]) = rndNumber.Next(1, 1000000).ToString
        'Next
        'Dim isDub As Boolean = False
        'Dim keysList As New List(Of String)
        ''Holds all generated keys
        'keysList = keys.ToList()
        ''Holds all duplicated items in keysList with their index in keysList 
        'Dim returnedDeplicatedItems As Hashtable = RandomBytesGenerator.CheckDuplication(Of String)(keysList, isDub)
        checkMask(mask)
        Dim maskChars As Char() = getMaskCharArray(mask)
        Dim resultRandomString As StringBuilder = setSizeOfReturnedString(maxSize)
        Dim randomBytesBuffer As Byte() = New Byte(maxSize - 1) {} 'This is the random array that will be passed to RNGCryptoServiceProvider.
        generateRNGCharacterMaskExtracted(randomBytesBuffer)
        resultRandomString = transformToChars(maskChars, randomBytesBuffer)
        Return resultRandomString.ToString()
    End Function
    ''' <summary>
    ''' Generic function for detect duplicated items in a given generic list.
    ''' </summary>
    ''' <typeparam name="T">Type that will be used through out the method.</typeparam>
    ''' <param name="listToBeChecked">List to be checked against duplicated items.</param>
    ''' <param name="someItemsDuplicated">Byref out parameter that will tell you if there is a duplicated items inside list</param>
    ''' <returns>Hashtable of the list item index as a key and the list item value as a value of the hashtable</returns>
    ''' <remarks></remarks>
    Public Shared Function CheckDuplication(Of T)(ByVal listToBeChecked As List(Of T), ByRef someItemsDuplicated As Boolean) As Hashtable
        'Ex:
        'Dim len As Integer = 1000000
        'Dim keys As String() = New String(len - 1) {}
        'Dim rndNumber As New Random
        'For [loop] As Integer = 0 To len - 1
        '	'Three methods to generate random numbers
        '	keys([loop]) = RandomBytesGenerator.GenerateRNGCharacterMask()
        '	'keys([loop]) = Guid.NewGuid.ToString
        '	'keys([loop]) = rndNumber.Next(1, 1000000).ToString
        'Next
        'Dim isDub As Boolean = False
        'Dim keysList As New List(Of String)
        ''Holds all generated keys
        'keysList = keys.ToList()
        ''Holds all duplicated items in keysList with their index in keysList 
        'Dim returnedDeplicatedItems As Hashtable = RandomBytesGenerator.CheckDuplication(Of String)(keysList, isDub)

        'Will hold all list items to perform the duplication checking.
        Dim listHashTable As New Hashtable()
        'Holds the duplication items if any.
        Dim duplicatedItemsHashTable As New Hashtable
        'Just to get the duplicated list item index in listToBeChecked 
        Dim currentListIndex As Integer = 0
        'Loop through listToBeChecked list to check for duplicated item.
        For Each listItem As T In listToBeChecked
            'Ask the hashtable if it already has this item
            If listHashTable(listItem) Is Nothing Then
                'Add the item if not already there
                listHashTable.Add(listItem, 0)
            Else
                duplicatedItemsHashTable.Add(currentListIndex, listItem)
                listHashTable(listItem) = CInt(listHashTable(listItem)) + 1
            End If
            currentListIndex = currentListIndex + 1
        Next
        If duplicatedItemsHashTable.Count > 0 Then
            someItemsDuplicated = True
        End If
        Return duplicatedItemsHashTable
    End Function

    Private Shared Sub checkMask(ByRef mask As String)
        If mask = vbNullString Then
            mask = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"
        End If
    End Sub

    Private Shared Function getMaskCharArray(ByVal mask As String) As Char()
        'Create an array of Char(s) with length of the string mash.
        Dim maskChars As Char() = New Char(mask.Length) {}
        'Populate the Chars array with mask bytes.
        maskChars = mask.ToCharArray()
        Return maskChars
    End Function

    Private Shared Function setSizeOfReturnedString(ByRef size As Integer) As StringBuilder
        Dim resultRandomString As StringBuilder = New StringBuilder(size)
        Return resultRandomString
    End Function

    Private Shared Sub generateRNGCharacterMaskExtracted(ByVal randomBytesBuffer As Byte())
        Dim crypto As New RNGCryptoServiceProvider()
        Try
            'Generate a non zero random bytes.
            crypto.GetNonZeroBytes(randomBytesBuffer)
        Catch ex As Exception
            If Debugger.IsAttached Then Debugger.Break()
            _privateRaiseErrorUp("", ex, True)
        End Try
        crypto.Dispose()
    End Sub

    Private Shared Function transformToChars(ByVal maskChars As Char(), ByVal randomBytesBuffer As Byte()) As StringBuilder
        Dim resultRandomString As New StringBuilder
        'A string builder that will receive the returned string.
        'For each byte in randomBytesBuffer mod by maskChars length
        For Each _byte As Byte In randomBytesBuffer
            'Here we divide [byte] by maskChars length and returns...
            'only the remainder that will be less than	maskChars length...
            'then we will pass that reminder as an index to maskChars array...
            'that will in return give us a char from the specified mask.
            Dim maskCharsIndex As Integer = _byte Mod (maskChars.Length - 1)
            resultRandomString.Append(maskChars(maskCharsIndex))
        Next
        Return resultRandomString
    End Function


End Class

